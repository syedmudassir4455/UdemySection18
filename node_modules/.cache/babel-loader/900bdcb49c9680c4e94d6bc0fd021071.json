{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit'; // import { createStore } from 'redux';\n\nconst initilaCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initilaState: initilaCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    increasePayload(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'Authenticaion',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // // const counterReducer = (state = initialState, action) => {\n// //   if (action.type === 'increment') {\n// //     return {\n// //       counter: state.counter + 1,\n// //       showCounter:state.showCounter\n// //     };\n// //   }\n// //   if(action.type === 'incrementby5'){\n// //     return{\n// //         counter:state.counter + 5,\n// //         showCounter:state.showCounter\n// //     }\n// // }\n// //   if(action.type === 'increase'){\n// //        return{\n// //            counter:state.counter + action.amount,\n// //            showCounter :state.showCounter\n// //        }\n// //   }\n// //   if (action.type === 'decrement') {\n// //     return {\n// //       counter: state.counter - 1,\n// //     };\n// //   }\n// //    if(action.type === 'toggle'){\n// //         return{\n// //             showCounter : !state.showCounter,\n// //             counter:state.counter\n// //         }\n// //    }\n// //   return state;\n// // };\n// // const store = createStore(counterReducer);\n// //const store = createStore(counterSlice.reducer)\n\nconst store = configureStore({\n  //   reducer:  counterSlice.reducer  // reducer can also an object which acts as a Map of reducers\n  reduder: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/syed/Udemy18reduxsection/01-starting-project/src/store/index.js"],"names":["createSlice","configureStore","initilaCounterState","counter","showCounter","counterSlice","name","initilaState","reducers","increment","state","decrement","increase","action","amount","increasePayload","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","initialState","login","logout","store","reduder","reducer","auth","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,EAAqBC,cAArB,QAA2C,kBAA3C,C,CAEA;;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AAEA,MAAMC,YAAY,GAAEL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,SADsB;AAE5BC,EAAAA,YAAY,EAAEL,mBAFc;AAG5BM,EAAAA,QAAQ,EAAC;AACLC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KAHI;;AAILQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KANI;;AAOLS,IAAAA,QAAQ,CAAEF,KAAF,EAAQG,MAAR,EAAgB;AACpBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAcU,MAAM,CAACC,MAArC;AAEH,KAVI;;AAYLC,IAAAA,eAAe,CAAEL,KAAF,EAAQG,MAAR,EAAgB;AAC3BH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAeU,MAAM,CAACG,OAAtC;AAEH,KAfI;;AAgBLC,IAAAA,aAAa,CAAEP,KAAF,EAAS;AAClBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACH;;AAlBI;AAHmB,CAAD,CAA/B;AAyBA,MAAMc,gBAAgB,GAAG;AACrBC,EAAAA,eAAe,EAAC;AADK,CAAzB;AAIA,MAAMC,SAAS,GAAEpB,WAAW,CAAC;AAEzBM,EAAAA,IAAI,EAAE,eAFmB;AAGzBe,EAAAA,YAAY,EAAEH,gBAHW;AAIzBV,EAAAA,QAAQ,EAAE;AACNc,IAAAA,KAAK,CAAEZ,KAAF,EAAS;AACVA,MAAAA,KAAK,CAACS,eAAN,GAAwB,IAAxB;AACH,KAHK;;AAINI,IAAAA,MAAM,CAAEb,KAAF,EAAS;AACXA,MAAAA,KAAK,CAACS,eAAN,GAAwB,KAAxB;AACH;;AANK;AAJe,CAAD,CAA5B,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAKA,MAAMK,KAAK,GAAEvB,cAAc,CAAC;AAC3B;AACCwB,EAAAA,OAAO,EAAG;AAACtB,IAAAA,OAAO,EAAEE,YAAY,CAACqB,OAAvB;AAAgCC,IAAAA,IAAI,EAACP,SAAS,CAACM;AAA/C;AAFgB,CAAD,CAA3B;AAKC,OAAO,MAAME,cAAc,GAAIvB,YAAY,CAACwB,OAArC;AACP,OAAO,MAAMC,WAAW,GAAGV,SAAS,CAACS,OAA9B;AAGP,eAAeL,KAAf","sourcesContent":["import { createSlice,configureStore } from '@reduxjs/toolkit';\n\n// import { createStore } from 'redux';\n\nconst initilaCounterState = { counter: 0, showCounter: true };\n\nconst counterSlice =createSlice({\n    name :'counter',\n    initilaState :initilaCounterState,\n    reducers:{\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase (state,action) {\n            state.counter = state.counter+action.amount\n           \n        },\n\n        increasePayload (state,action) {\n            state.counter = state.counter +action.payload\n\n        },\n        toggleCounter (state) {\n            state.showCounter = !state.showCounter\n        },\n    }\n})\n\nconst initialAuthState = {\n    isAuthenticated:false\n};\n\nconst authSlice =createSlice({\n\n    name :'Authenticaion',\n    initialState :initialAuthState,\n    reducers :{\n        login (state) {\n            state.isAuthenticated = true\n        },\n        logout (state) {\n            state.isAuthenticated = false\n        }\n    }\n\n\n})\n\n// // const counterReducer = (state = initialState, action) => {\n// //   if (action.type === 'increment') {\n// //     return {\n// //       counter: state.counter + 1,\n// //       showCounter:state.showCounter\n// //     };\n// //   }\n\n// //   if(action.type === 'incrementby5'){\n// //     return{\n// //         counter:state.counter + 5,\n// //         showCounter:state.showCounter\n// //     }\n// // }\n\n// //   if(action.type === 'increase'){\n// //        return{\n// //            counter:state.counter + action.amount,\n// //            showCounter :state.showCounter\n// //        }\n// //   }\n\n// //   if (action.type === 'decrement') {\n// //     return {\n// //       counter: state.counter - 1,\n// //     };\n// //   }\n\n\n// //    if(action.type === 'toggle'){\n// //         return{\n// //             showCounter : !state.showCounter,\n// //             counter:state.counter\n// //         }\n// //    }\n// //   return state;\n// // };\n\n// // const store = createStore(counterReducer);\n\n// //const store = createStore(counterSlice.reducer)\n\n\n\n\nconst store =configureStore({\n //   reducer:  counterSlice.reducer  // reducer can also an object which acts as a Map of reducers\n  reduder : {counter :counterSlice.reducer, auth:authSlice.reducer }\n})\n\n export const counterActions  = counterSlice.actions;\n export const authActions = authSlice.actions;\n\n\n export default store;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}